<?php
/*
 * Copyright 2021 LABOR.digital
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Last modified: 2021.07.14 at 10:56
 */

declare(strict_types=1);


namespace LaborDigital\T3ba\Tool\Tca\Preview;

use LaborDigital\T3ba\Core\Di\ContainerAwareTrait;

class PreviewLinkHook
{
    public const CONFIG_TRANSFER_MARKER = 'XX_T3BA_PREVIEW_CONFIG';
    public const UID_TRANSFER_MARKER = 'XX_T3BA_PREVIEW_UID';
    public const HIDDEN_TRANSFER_MARKER = 'XX_T3BA_PREVIEW_HIDDEN';
    public const TABLE_TRANSFER_MARKER = 'XX_T3BA_PREVIEW_TABLE';
    
    use ContainerAwareTrait;
    
    /**
     * Hook used to post-process the preview url generated by the TYPO3 backend. We use this hook
     * in combination with the automatically generated page ts config to generate the configured
     * preview link more dynamically.
     *
     * @param   string  $previewUrl
     * @param   int     $pageUid
     * @param   array   $rootLine
     * @param   string  $anchorSection
     * @param   string  $viewScript
     * @param   string  $additionalGetVars
     * @param   bool    $switchFocus
     *
     * @return string
     */
    public function postProcess(
        string $previewUrl,
        int $pageUid,
        array $rootLine,
        string $anchorSection,
        string $viewScript,
        string $additionalGetVars,
        bool $switchFocus
    ): string
    {
        if (! str_contains($previewUrl, static::CONFIG_TRANSFER_MARKER)) {
            return $previewUrl;
        }
        
        parse_str($additionalGetVars, $params);
        $configuration = \GuzzleHttp\json_decode(base64_decode($params[static::CONFIG_TRANSFER_MARKER] ?? ''), true);
        
        $tableName = $params[static::TABLE_TRANSFER_MARKER] ?? 'unknown';
        $uid = $params[static::UID_TRANSFER_MARKER] ?? '1';
        $isHidden = ! empty($params[static::HIDDEN_TRANSFER_MARKER]);
        
        // Use either the provided generator, or the internal generator to create the link
        if ($configuration['generator']) {
            /** @var PreviewLinkGeneratorInterface $generator */
            $generator = $this->getServiceOrInstance($configuration['generator']);
            $link = $generator->generate($tableName, $uid, $configuration, func_get_args());
        } else {
            $link = $this->internalGenerator($uid, $configuration);
        }
        
        $tables = [
            $params[static::TABLE_TRANSFER_MARKER] ?? null,
        ];
        if ($configuration['additionalTables']) {
            $tables = array_merge($tables, $configuration['additionalTables']);
        }
        
        // If the record isn't hidden, and we only have a single table -> no need for showing hidden rows
        if (! $isHidden && count($tables) === 1) {
            return $link;
        }
        
        return $this->getService(PreviewHandler::class)->appendUrlValueToLink($link, $tables);
    }
    
    /**
     * Internal generator to build a preview url
     *
     * @param   string  $uid
     * @param   array   $configuration
     *
     * @return string
     */
    protected function internalGenerator(string $uid, array $configuration): string
    {
        $pid = $configuration['pidOrLinkSet'];
        
        $links = $this->cs()->links;
        if (is_string($pid) && $links->hasDefinition($pid)) {
            $link = $links->getLink($pid);
            
            if (empty($configuration['uidParam'])) {
                $required = $link->getRequiredElements();
                $uidParam = reset($required);
                if (! $uidParam) {
                    $uidParam = 'uid';
                }
            }
            
            $link = $link->withAddedToArgs($uidParam, $uid);
        } else {
            $link = $links->getLink()
                          ->withPid($pid)
                          ->withAddedToArgs($configuration['uidParam'] ?? 'uid', $uid);
        }
        
        if ($configuration['controllerClass']) {
            $link = $link->withControllerClass($configuration['controllerClass']);
        }
        
        if ($configuration['controllerAction']) {
            $link = $link->withControllerAction($configuration['controllerAction']);
        }
        
        if ($configuration['additionalGetParameters']) {
            $link = $link->withArgs($configuration['additionalGetParameters']);
        }
        
        return $link->build();
    }
}

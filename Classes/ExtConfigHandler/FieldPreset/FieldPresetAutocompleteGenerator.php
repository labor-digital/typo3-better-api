<?php
/*
 * Copyright 2021 LABOR.digital
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Last modified: 2021.01.30 at 12:44
 */

declare(strict_types=1);


namespace LaborDigital\T3BA\ExtConfigHandler\FieldPreset;


use LaborDigital\T3BA\Core\CodeGeneration\CodeGenerationHelperTrait;
use LaborDigital\T3BA\ExtConfig\ExtConfigContext;
use LaborDigital\T3BA\Tool\Tca\Builder\Logic\AbstractField;
use ReflectionMethod;

class FieldPresetAutocompleteGenerator
{
    use CodeGenerationHelperTrait;

    /**
     * @var \LaborDigital\T3BA\ExtConfig\ExtConfigContext
     */
    protected $context;

    /**
     * FieldPresetAutocompleteGenerator constructor.
     *
     * @param   \LaborDigital\T3BA\ExtConfig\ExtConfigContext  $context
     */
    public function __construct(ExtConfigContext $context)
    {
        $this->context = $context;
    }

    /**
     * Receives a list of presets generated by FieldPresetListGenerator and generates a
     * autocomplete helper interface into the tempFs directory.
     *
     * This is a convenience feature for dev purposes only!
     *
     * @param   array  $presets
     */
    public function generate(array $presets): void
    {
        $methods = [];
        foreach ($presets as $key => $def) {
            $methods[] = $this->makePresetSrc($key, new ReflectionMethod($def[0], $def[1]));
        }

        $source = $this->makeInterfaceSrc($methods);

        $this->context->getExtConfigService()->getFs()->setFileContent(
            '/autocompleteHelper/FieldPresetAutocompleteHelper.php', $source);
    }

    /**
     * Builds the source code for a single preset method
     *
     * @param   string             $key
     * @param   \ReflectionMethod  $method
     *
     * @return string
     */
    protected function makePresetSrc(string $key, ReflectionMethod $method): string
    {
        return '
	/**
	 * ' . $this->sanitizeDesc($method->getDocComment()) . '
	 * @return \\' . AbstractField::class . '
	 *
	 * @see \\' . $method->getDeclaringClass()->getName() . '::' . $method->getName() . '();
	 */
	public function ' . $key
               . '(' . $this->generateMethodArgs($method) . '): \\'
               . AbstractField::class . ';
';
    }

    /**
     * Builds the outer source of the generated interface
     *
     * @param   array  $methods
     *
     * @return string
     */
    protected function makeInterfaceSrc(array $methods): string
    {
        return '<?php
declare(strict_types=1);

namespace LaborDigital\T3BA\Tool\Tca\Builder;

/**
 * ATTENTION: This is a autocomplete helper! It will only be generated in a development environment!
 * It is also not autoloadable and therefore not considered part of the active code-base!
 * DON\'T USE THIS IN YOUR CODE!
 *
 * IF YOU TELL ME YOUR CODE BROKE, BECAUSE YOU USED IT SOMEWHERE - I\'M GONNA LAUGH AT YOU!
 */
interface FieldPresetAutocompleteHelper {

' . implode(PHP_EOL . PHP_EOL, $methods) . '

}
';
    }
}
